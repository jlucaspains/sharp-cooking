#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SharpCooking.Printing
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 1 "Template.cshtml"
using SharpCooking.Models;

#line default
#line hidden

#line 2 "Template.cshtml"
using SharpCooking.Localization;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "17.0.0.343")]
public partial class Template : TemplateBase
{

#line hidden

#line 4 "Template.cshtml"
public RecipePrintViewModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("\r\n");

WriteLiteral("<!DOCTYPE html>\r\n<html");

WriteLiteral(" lang=\"en\"");

WriteLiteral(@">
<style>
    .source {
        margin-bottom: 30px;
    }

        .source > div {
            display: inline-block;
            margin-right: 10px;
        }

    footer {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        font-size: 0.8em;
    }
</style>
<body>
    <h1>");


#line 26 "Template.cshtml"
   Write(Model.Title);


#line default
#line hidden
WriteLiteral("</h1>\r\n    <div");

WriteLiteral(" class=\"source\"");

WriteLiteral(">\r\n");


#line 28 "Template.cshtml"
        

#line default
#line hidden

#line 28 "Template.cshtml"
         if (!string.IsNullOrEmpty(Model.Source))
        {


#line default
#line hidden
WriteLiteral("            <div><span>");


#line 30 "Template.cshtml"
                  Write(string.Format("{0}: {1}", Resources.EditItemView_Source, Model.Source));


#line default
#line hidden
WriteLiteral("</span></div>\r\n");


#line 31 "Template.cshtml"
        }


#line default
#line hidden
WriteLiteral("        ");


#line 32 "Template.cshtml"
         if (Model.Rating > 0)
        {


#line default
#line hidden
WriteLiteral("            <div><span>");


#line 34 "Template.cshtml"
                  Write(string.Format("{0}: {1}", Resources.EditItemView_Rating, new string('‚≠ê', Model.Rating)));


#line default
#line hidden
WriteLiteral("</span></div>\r\n");


#line 35 "Template.cshtml"
        }


#line default
#line hidden
WriteLiteral("    </div>\r\n    <div><img");

WriteAttribute ("src", " src=\"", "\""
, Tuple.Create<string,object,bool> ("", "data:image/png;base64,", true)

#line 37 "Template.cshtml"
  , Tuple.Create<string,object,bool> ("", Model.Base64MainImage

#line default
#line hidden
, false)
);
WriteLiteral(" width=\"50%\"");

WriteLiteral(" height=\"auto\"");

WriteLiteral(" /></div>\r\n    <div>\r\n        <h2>");


#line 39 "Template.cshtml"
       Write(Resources.EditItemView_Ingredients);


#line default
#line hidden
WriteLiteral("</h2>\r\n        <ul>\r\n");


#line 41 "Template.cshtml"
            

#line default
#line hidden

#line 41 "Template.cshtml"
             foreach (var item in Model.Ingredients)
            {


#line default
#line hidden
WriteLiteral("                <li>");


#line 43 "Template.cshtml"
               Write(item);


#line default
#line hidden
WriteLiteral("</li>\r\n");


#line 44 "Template.cshtml"
            }


#line default
#line hidden
WriteLiteral("        </ul>\r\n    </div>\r\n    <div>\r\n        <h2>");


#line 48 "Template.cshtml"
       Write(Resources.EditItemView_Instructions);


#line default
#line hidden
WriteLiteral("</h2>\r\n        <ol>\r\n");


#line 50 "Template.cshtml"
            

#line default
#line hidden

#line 50 "Template.cshtml"
             foreach (var item in Model.Instructions)
            {


#line default
#line hidden
WriteLiteral("                <li>");


#line 52 "Template.cshtml"
               Write(item);


#line default
#line hidden
WriteLiteral("</li>\r\n");


#line 53 "Template.cshtml"
            }


#line default
#line hidden
WriteLiteral("        </ol>\r\n    </div>\r\n    <div>\r\n        <h2>");


#line 57 "Template.cshtml"
       Write(Resources.EditItemView_Notes);


#line default
#line hidden
WriteLiteral("</h2>\r\n        <span>");


#line 58 "Template.cshtml"
         Write(Model.Notes);


#line default
#line hidden
WriteLiteral("</span>\r\n    </div>\r\n    <footer>\r\n        <span>https://sharpcooking.net</span>\r" +
"\n    </footer>\r\n</body>\r\n</html>");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class TemplateBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
